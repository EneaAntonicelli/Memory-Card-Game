{"version":3,"sources":["components/GameOver/GameOver.js","components/Cards/Card.js","components/Wrapper/Wrapper.js","components/NavBar/NavBar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GameOver","props","react_default","a","createElement","className","loserScore","onClick","playAgain","Card","clickCard","id","alt","name","src","image","Wrapper","children","NavBar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","score","highScore","Footer","App","state","cards","cardArray","message","gameover","_this","setState","shuffle","indexOf","push","length","shift","console","log","j","x","i","Math","floor","random","renderContent","map","card","components_Cards_Card","key","components_GameOver_GameOver","components_Wrapper_Wrapper","components_NavBar_NavBar","this","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70493010.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GameOver.css\";\r\n\r\nconst GameOver = props => (\r\n  <div className=\"jumbotron jumbotron-fluid text-center bg-primary\">\r\n    <div className=\"container\">\r\n      <h1 className=\"display-4\">YOU LOST.</h1>\r\n      <p className=\"lead\">\r\n        I am not sure about your skill level but... Here is your score:\r\n        <span>{props.loserScore}</span>\r\n      </p>\r\n      <button className=\"btn btn-primary\" onClick={() => props.playAgain()}>\r\n        Play Again?\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default GameOver;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"img-container\" onClick={() => props.clickCard(props.id)}>\r\n    <div className=\"card\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = props => (\r\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <button\r\n      className=\"navbar-toggler\"\r\n      type=\"button\"\r\n      data-toggle=\"collapse\"\r\n      data-target=\"#navbarSupportedContent\"\r\n      aria-controls=\"navbarSupportedContent\"\r\n      aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\"\r\n    >\r\n      <span className=\"navbar-toggler-icon\" />\r\n    </button>\r\n\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav mr-auto\">\r\n        <li className=\"nav-item active\">\r\n          <a className=\"nav-link\" href=\"/\">\r\n            Home <span className=\"sr-only\">(current)</span>\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className=\"nav-link\"\r\n            href=\"https://salty-mountain-26362.herokuapp.com/\"\r\n          >\r\n            Portfolio\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"https://github.com/EneaAntonicelli\">\r\n            GitHub\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <h5 className=\"score\">Score: {props.score}</h5>\r\n\r\n      <h5 className=\"highScore\">High Score: {props.highScore}</h5>\r\n    </div>\r\n  </nav>\r\n);\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = props => (\r\n  <footer className=\"footer\">\r\n    <div className=\"container\">\r\n      <span className=\"text-muted\">&#169; Enea Antonicelli</span>\r\n    </div>\r\n  </footer>\r\n);\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport GameOver from \"./components/GameOver\";\nimport Card from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport cards from \"./cardArray.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // SETS THE STATE OF CARDS TO THE CARDARRAY.JSON\n  state = {\n    cards,\n    score: 0,\n    cardArray: [],\n    highScore: 0,\n    message: \"\",\n    gameover: false,\n    loserScore: 0\n  };\n\n  playAgain = () => {\n    this.setState({\n      score: 0,\n      message: \"\",\n      cardArray: [],\n      gameover: false,\n      loserScore: 0\n    });\n  };\n\n  clickCard = id => {\n    this.setState({ cards: this.shuffle(this.state.cards) });\n\n    if (this.state.cardArray.indexOf(id) === -1) {\n      //THE FOLLOWING CODE WILL PUSH TO THE ARRAY UNTIL THE ARRAY HAS 6. AT WHICH POINT IT WILL TRIM THE FIRST VALUE OF THE ARRAY AND MAINTAIN A COUNT OF 5.\n      //WHAT THIS EFFECTIVELY DOES, IS ENSURE THAT THE ARRAY DOES NOT GET FILLED ONCE ALL 18 CHARACTERS HAVE BEEN CLICKED.\n      // IT ENSURES THE GAME GOES ON FOREVER UNTIL THERE IS A MISTAKE. THIS ALLOWS THE USER TO REACH A VERY HIGH SCORE THAT IS PAST THE LIMIT OF 18.\n      this.state.cardArray.push(id);\n      if (this.state.cardArray.length > 5) {\n        this.state.cardArray.shift();\n        console.log(\"card array over 5: \" + this.state.cardArray);\n      }\n      this.setState({\n        cardArray: this.state.cardArray,\n        message: \"And another. - DJ Khaled\",\n        score: this.state.score + 1,\n        loserScore: this.state.score + 1,\n        gameover: false\n      });\n      // ENSURE THAT THE HIGHSCORE UPDATES ON THE FLY ALONG WITH THE SCORE.\n      if (this.state.score >= this.state.highScore) {\n        this.setState({\n          highScore: this.state.score + 1\n        });\n      }\n      console.log(\"card array: \" + this.state.cardArray);\n    } else {\n      // ZERO EVERYTHING OUT.\n      this.setState({\n        loserScore: this.state.loserScore,\n        score: 0,\n        cardArray: [],\n        message: \"It's over. leave.\",\n        gameover: true\n      });\n\n      if (this.state.score > this.state.highScore) {\n        this.setState({\n          highScore: this.state.score\n        });\n      }\n    }\n  };\n\n  shuffle = cardArray => {\n    var j, x, i;\n    for (i = cardArray.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = cardArray[i];\n      cardArray[i] = cardArray[j];\n      cardArray[j] = x;\n    }\n    return cardArray;\n  };\n\n  renderContent = () => {\n    if (this.state.gameover === false) {\n      return this.state.cards.map(card => (\n        <Card\n          id={card.id}\n          key={card.id}\n          clickCard={this.clickCard}\n          name={card.name}\n          image={card.image}\n        />\n      ));\n    } else {\n      return (\n        <GameOver\n          playAgain={this.playAgain}\n          loserScore={this.state.loserScore}\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar score={this.state.score} highScore={this.state.highScore} />\n        {this.renderContent()}\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}